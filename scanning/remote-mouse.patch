diff --git a/src/masscan-app.c b/src/masscan-app.c
index 3aff959..ddd35ea 100644
--- a/src/masscan-app.c
+++ b/src/masscan-app.c
@@ -42,6 +42,9 @@ masscan_app_to_string(enum ApplicationProtocol proto)
     case PROTO_TELNET:         return "telnet";
     case PROTO_RDP:            return "rdp";
     case PROTO_HTTP_SERVER:     return "http.server";
+    case PROTO_REMOTEMOUSE:     return "remotemouse";
+    case PROTO_REMOTEMOUSE_OS:     return "remotemouse.os";
+    case PROTO_REMOTEMOUSE_PASSWORD_PROTECTED:     return "remotemouse.password_protected";
             
     default:
         sprintf_s(tmp, sizeof(tmp), "(%u)", proto);
@@ -89,6 +92,10 @@ masscan_string_to_app(const char *str)
         {"telnet",      PROTO_TELNET},
         {"rdp",         PROTO_RDP},
         {"http.server", PROTO_HTTP_SERVER},
+        {"remotemouse", PROTO_REMOTEMOUSE},
+        {"remotemouse.os", PROTO_REMOTEMOUSE_OS},
+        {"remotemouse.password_protected", PROTO_REMOTEMOUSE_PASSWORD_PROTECTED},
+
         {0,0}
     };
     size_t i;
diff --git a/src/masscan-app.h b/src/masscan-app.h
index fb4a441..0bc1469 100644
--- a/src/masscan-app.h
+++ b/src/masscan-app.h
@@ -37,6 +37,9 @@ enum ApplicationProtocol {
     PROTO_TELNET,
     PROTO_RDP,          /* Microsoft Remote Desktop Protocol tcp/3389 */
     PROTO_HTTP_SERVER,  /* HTTP "Server:" field */
+    PROTO_REMOTEMOUSE,
+    PROTO_REMOTEMOUSE_OS,
+    PROTO_REMOTEMOUSE_PASSWORD_PROTECTED,
     
     PROTO_end_of_list /* must be last one */
 };
diff --git a/src/proto-banner1.c b/src/proto-banner1.c
index 08f8b83..a8bfb9d 100644
--- a/src/proto-banner1.c
+++ b/src/proto-banner1.c
@@ -17,6 +17,7 @@
 #include "proto-imap4.h"
 #include "proto-pop3.h"
 #include "proto-vnc.h"
+#include "proto-remotemouse.h"
 #include "proto-memcached.h"
 #include "masscan-app.h"
 #include "scripting.h"
@@ -42,6 +43,7 @@ struct Patterns patterns[] = {
     {"\x83\x00\x00\x01\x8f", 5, PROTO_SMB, SMACK_ANCHOR_BEGIN, 0}, /* Unspecified error */
 
     /* ...the remainder can be in any order */
+    {"SIN 15*** *** *** 300", 21, PROTO_REMOTEMOUSE, SMACK_ANCHOR_BEGIN | SMACK_WILDCARDS, 0},
     {"SSH-1.",      6, PROTO_SSH1, SMACK_ANCHOR_BEGIN, 0},
     {"SSH-2.",      6, PROTO_SSH2, SMACK_ANCHOR_BEGIN, 0},
     {"HTTP/1.",     7, PROTO_HTTP, SMACK_ANCHOR_BEGIN, 0},
@@ -252,6 +254,15 @@ banner1_parse(
                         banout,
                         more);
         break;
+    case PROTO_REMOTEMOUSE:
+        banner_remotemouse.parse(
+                        banner1,
+                        banner1->http_fields,
+                        tcb_state,
+                        px, length,
+                        banout,
+                        more);
+        break;
     case PROTO_SSL3:
         banner_ssl.parse(
                         banner1,
diff --git a/src/proto-remotemouse.c b/src/proto-remotemouse.c
new file mode 100644
index 0000000..3de0d8a
--- /dev/null
+++ b/src/proto-remotemouse.c
@@ -0,0 +1,60 @@
+#include "proto-remotemouse.h"
+
+
+/***************************************************************************
+ ***************************************************************************/
+static void
+remotemouse_parse(  const struct Banner1 *banner1,
+          void *banner1_private,
+          struct ProtocolState *pstate,
+          const unsigned char *px, size_t length,
+          struct BannerOutput *banout,
+          struct InteractiveData *more)
+{
+    banout_append(banout, PROTO_REMOTEMOUSE, px, length);
+
+    // Determine OS
+    if(strncmp((char*)(px+6), "win", 3) == 0) {
+        banout_append(banout, PROTO_REMOTEMOUSE_OS, "Windows", 7);
+    } else if (strncmp((char*)(px+6), "mac", 3) == 0) {
+        banout_append(banout, PROTO_REMOTEMOUSE_OS, "MacOS", 5);
+    } else {
+        banout_append(banout, PROTO_REMOTEMOUSE_OS, "UNKNOWN", 7);
+    }
+
+    // Determine Password Protected
+    if(strncmp((char*)(px+10), "pwd pwd", 7) == 0) {
+        banout_append(banout, PROTO_REMOTEMOUSE_PASSWORD_PROTECTED, "TRUE", 4);
+    } else if (strncmp((char*)(px+10), "nop nop", 7) == 0) {
+        banout_append(banout, PROTO_REMOTEMOUSE_PASSWORD_PROTECTED, "FALSE", 5);
+    } else {
+        banout_append(banout, PROTO_REMOTEMOUSE_PASSWORD_PROTECTED, "UNKNOWN", 7);
+    }
+}
+
+/***************************************************************************
+ ***************************************************************************/
+static void *
+remotemouse_init(struct Banner1 *banner1)
+{
+    UNUSEDPARM(banner1);
+    return 0;
+}
+
+
+/***************************************************************************
+ ***************************************************************************/
+static int
+remotemouse_selftest(void)
+{
+    return 0;
+}
+
+/***************************************************************************
+ ***************************************************************************/
+const struct ProtocolParserStream banner_remotemouse = {
+    "remotemouse", 1978, 0, 0, 0,
+    remotemouse_selftest,
+    remotemouse_init,
+    remotemouse_parse,
+};
\ No newline at end of file
diff --git a/src/proto-remotemouse.h b/src/proto-remotemouse.h
new file mode 100644
index 0000000..366f112
--- /dev/null
+++ b/src/proto-remotemouse.h
@@ -0,0 +1,11 @@
+#ifndef PROTO_REMOTEMOUSE_H
+#define PROTO_REMOTEMOUSE_H
+#include "proto-banner1.h"
+#include "unusedparm.h"
+#include "masscan-app.h"
+#include <ctype.h>
+#include <string.h>
+
+extern const struct ProtocolParserStream banner_remotemouse;
+
+#endif
